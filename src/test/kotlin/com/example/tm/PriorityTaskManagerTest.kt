/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.example.tm

import org.junit.Test

class PriorityTaskManagerTest : BaseTest() {
    override fun initClassUnderTest(): AbstractTaskManager {
        return PriorityTaskManager()
    }

    @Test
    fun whenTaskManagerIsNotFullAdditionShouldWork() {
        // Given
        val p1 = Process(1, Priority.Medium, classUnderTest)
        // Expect
        assert(classUnderTest.add(p1))
        assert(classUnderTest.tasks.size == 1)
        assert(classUnderTest.tasks.filter { it.ID.toInt() == 1 }.size == 1)
    }

    @Test
    fun whenTaskManagerIsFullAndThereIsNoLowerPrioProcessANewProcessShouldNotBeAdded() {
        // Given
        for (i in 1 until PROCESS_LIMIT + 1) {
            classUnderTest.add(Process(i.toLong(), Priority.Medium, classUnderTest))
        }
        val p11 = Process(PROCESS_LIMIT + 1.toLong(), Priority.Low, classUnderTest)
        // Expect
        assert(!classUnderTest.add(p11))
        assert(classUnderTest.tasks.size == PROCESS_LIMIT)
        assert(!classUnderTest.tasks.contains(p11))
    }

    @Test
    fun whenTaskManagerIsFullAndThereIsALowerPrioProcessANewProcessShouldBeAddedAndLowestPrioProcessShouldBeRemoved() {
        // Given
        for (i in 1 until PROCESS_LIMIT) {
            classUnderTest.add(Process(i.toLong(), Priority.Medium, classUnderTest))
        }
        val lowestPrio = Process(PROCESS_LIMIT.toLong(), Priority.Low, classUnderTest)
        classUnderTest.add(lowestPrio)
        val p11 = Process(PROCESS_LIMIT + 1.toLong(), Priority.High, classUnderTest)
        // Expect
        assert(classUnderTest.add(p11))
        assert(classUnderTest.tasks.size == PROCESS_LIMIT)
        assert(classUnderTest.tasks.contains(p11))
        assert(!classUnderTest.tasks.contains(lowestPrio))
    }


    @Test
    fun whenTaskManagerIsFullAndThereIsALowerPrioProcessANewProcessShouldBeAddedAndOldestLowestPrioProcessShouldBeRemoved() {
        val lowestAndOldestPrio = Process(1, Priority.Medium, classUnderTest)
        classUnderTest.add(lowestAndOldestPrio)
        // Given
        for (i in 2 until PROCESS_LIMIT+1) {
            classUnderTest.add(Process(i.toLong(), Priority.Medium, classUnderTest))
        }

        val p11 = Process(PROCESS_LIMIT + 1.toLong(), Priority.High, classUnderTest)
        // Expect
        assert(classUnderTest.add(p11))
        assert(classUnderTest.tasks.size == PROCESS_LIMIT)
        assert(classUnderTest.tasks.contains(p11))
        assert(!classUnderTest.tasks.contains(lowestAndOldestPrio))
    }
}
